dos的常用指令,"盘符:     // 切换盘符
cd 目录   // 切换子目录
cd /      // 回到根目录
cd ../   // 回到上一级 
dir       // 显示当前文件夹中的文件和目录列表
cls       // 清除屏幕
Ctrl + c    // 中断执行
上箭头和下箭头: // 快速切换之前使用过的指令","盘符:     // 切换盘符
cd 目录   // 切换子目录
cd /      // 回到根目录
cd ../   // 回到上一级 
dir       // 显示当前文件夹中的文件和目录列表
cls       // 清除屏幕
Ctrl + c    // 中断执行
上箭头和下箭头: // 快速切换之前使用过的指令"
node的模块化,"模块化: 每一个js文件都是一个模块, 模块和模块之间可以相互导入导出.

`node如何执行js文件:` 1. 在dos命令窗口中, 输入node js文件即可; 2. 在编辑器中,右键js文件,打开终端,输入node js文件即可

`node的模块化:`
1. 导出: module.exports = {}
2. 导入: let 变量 = require('路径名|模块名')

注意: 
1.导出的时候, 可以是任意数据类型, 但一般是对象;
2.导入的时候, 如果是自己写的文件, 导入的就是路径名; 如果是node内置的模块,或者第三方模块, 导入的就是模块名;","模块化: 每一个js文件都是一个模块, 模块和模块之间可以相互导入导出.

`node如何执行js文件:` 1. 在dos命令窗口中, 输入node js文件即可; 2. 在编辑器中,右键js文件,打开终端,输入node js文件即可

`node的模块化:`
1. 导出: module.exports = {}
2. 导入: let 变量 = require('路径名|模块名')

注意: 
1.导出的时候, 可以是任意数据类型, 但一般是对象;
2.导入的时候, 如果是自己写的文件, 导入的就是路径名; 如果是node内置的模块,或者第三方模块, 导入的就是模块名;"
NPM常用指令,"npm: node package manager: 包管理工具.

包: 第三方的库文件

管理: 安装, 删除或替换
#1. 创建package.json文件
npm init -y

#2. 安装模块 默认安装到运行环境
npm i 模块名

#3. 安装模块 安装到开发环境
npm i 模块名 -D
// 注意: 运行环境: 上线后依然需要使用的模块; 开发环境: 仅在开发阶段才使用的模块

#4. 安装模块 全局安装(只需要装一次, 所有项目都可以使用)
// 全局安装的路径: C:\Users\你的电脑名\AppData\Roaming\npm
// vscode编辑器不识别ps1文件, 需要手动删除
// 一般全局安装后, 系统会多一个指令
npm i 模块名 -g
eg: npm i nodemon -g

#5 安装模块 指定版本号
// 查看模块的所有版本号
npm view 模块 versions
npm i 模块名@版本号 | npm i 模块名@版本号 -D

# 删除模块
npm remove 模块名

# 根据package.json文件安装所有模块
npm i

# 如果npm下载源比较慢，建议切换下载源为淘宝镜像
1) 查看当前下载源
npm config get registry
2) 切换下载源
npm config set registry https://registry.npm.taobao.org","npm: node package manager: 包管理工具.

包: 第三方的库文件

管理: 安装, 删除或替换
#1. 创建package.json文件
npm init -y

#2. 安装模块 默认安装到运行环境
npm i 模块名

#3. 安装模块 安装到开发环境
npm i 模块名 -D
// 注意: 运行环境: 上线后依然需要使用的模块; 开发环境: 仅在开发阶段才使用的模块

#4. 安装模块 全局安装(只需要装一次, 所有项目都可以使用)
// 全局安装的路径: C:\Users\你的电脑名\AppData\Roaming\npm
// vscode编辑器不识别ps1文件, 需要手动删除
// 一般全局安装后, 系统会多一个指令
npm i 模块名 -g
eg: npm i nodemon -g

#5 安装模块 指定版本号
// 查看模块的所有版本号
npm view 模块 versions
npm i 模块名@版本号 | npm i 模块名@版本号 -D

# 删除模块
npm remove 模块名

# 根据package.json文件安装所有模块
npm i

# 如果npm下载源比较慢，建议切换下载源为淘宝镜像
1) 查看当前下载源
npm config get registry
2) 切换下载源
npm config set registry https://registry.npm.taobao.org"
package.json文档说明,"项目的说明文档.包含了项目信息和所依赖的模块的信息
{
  ""name"": ""03-npm-demo"", // 项目名
  ""version"": ""1.0.0"", // 版本号
  ""description"": """", // 项目描述
  ""main"": ""index.js"", // 入口
  ""scripts"": { # 可执行脚本
    ""test"": ""echo \""Error: no test specified\"" && exit 1""
  },
  ""keywords"": [], // 关键词
  ""author"": """", // 作者
  ""license"": ""ISC"", // 开源协议
  ""dependencies"": { // 安装的模块 默认安装到运行环境
    ""swiper"": ""^8.1.5""
  },
  ""devDependencies"": { // 安装的模块 安装到开发环境中
    ""axios"": ""^0.27.2""
  }
}","项目的说明文档.包含了项目信息和所依赖的模块的信息
{
  ""name"": ""03-npm-demo"", // 项目名
  ""version"": ""1.0.0"", // 版本号
  ""description"": """", // 项目描述
  ""main"": ""index.js"", // 入口
  ""scripts"": { # 可执行脚本
    ""test"": ""echo \""Error: no test specified\"" && exit 1""
  },
  ""keywords"": [], // 关键词
  ""author"": """", // 作者
  ""license"": ""ISC"", // 开源协议
  ""dependencies"": { // 安装的模块 默认安装到运行环境
    ""swiper"": ""^8.1.5""
  },
  ""devDependencies"": { // 安装的模块 安装到开发环境中
    ""axios"": ""^0.27.2""
  }
}"
yarn的常用指令,"#0. 全局安装yarn
npm i yarn -g

#1. 创建package.json文件
yarn init -y

#2. 安装模块 默认安装到运行环境
yarn add 模块名

#3. 安装模块 安装到开发环境
yarn add 模块名 -D
// 注意: 运行环境: 上线后依然需要使用的模块; 开发环境: 仅在开发阶段才使用的模块

#4. 安装模块 全局安装(只需要装一次, 所有项目都可以使用)
// 全局安装的路径: C:\Users\admin\AppData\Local\Yarn\bin
// 一般全局安装后, 系统会多一个指令
yarn global add 模块名
eg: yarn global add rimraf (rimraf: 删除目录或者文件)
// 注意: yarn安装的全局模块,需要配置环境变量
// 点击windows图标, 搜索高级系统设置,点击环境变量,将全局安装的路径添加到path里面即可

#5 安装模块 指定版本号
yarn add 模块名@版本号 | yarn add 模块名@版本号 -D

# 删除模块
yarn remove 模块名

# 根据package.json文件安装所有模块
yarn

# 如果yarn下载源比较慢，建议切换下载源为淘宝镜像
1) 查看当前下载源
yarn config get registry
2) 切换下载源
yarn config set registry https://registry.npm.taobao.org","#0. 全局安装yarn
npm i yarn -g

#1. 创建package.json文件
yarn init -y

#2. 安装模块 默认安装到运行环境
yarn add 模块名

#3. 安装模块 安装到开发环境
yarn add 模块名 -D
// 注意: 运行环境: 上线后依然需要使用的模块; 开发环境: 仅在开发阶段才使用的模块

#4. 安装模块 全局安装(只需要装一次, 所有项目都可以使用)
// 全局安装的路径: C:\Users\admin\AppData\Local\Yarn\bin
// 一般全局安装后, 系统会多一个指令
yarn global add 模块名
eg: yarn global add rimraf (rimraf: 删除目录或者文件)
// 注意: yarn安装的全局模块,需要配置环境变量
// 点击windows图标, 搜索高级系统设置,点击环境变量,将全局安装的路径添加到path里面即可

#5 安装模块 指定版本号
yarn add 模块名@版本号 | yarn add 模块名@版本号 -D

# 删除模块
yarn remove 模块名

# 根据package.json文件安装所有模块
yarn

# 如果yarn下载源比较慢，建议切换下载源为淘宝镜像
1) 查看当前下载源
yarn config get registry
2) 切换下载源
yarn config set registry https://registry.npm.taobao.org"
webpack入门,"前端静态资源打包神器

打包原理: 从一个入口文件入手, 将所有和这个入口文件有直接关系或者间接关系的其他所有文件打包成一个或多个包裹.","前端静态资源打包神器

打包原理: 从一个入口文件入手, 将所有和这个入口文件有直接关系或者间接关系的其他所有文件打包成一个或多个包裹."
webpack5大核心概念,"entry: 入口. 项目的打包入口文件
output: 出口. 项目打包后的文件名和存放位置
loader: 加载器. 让webpack处理非js文件
plugins: 插件. 让webpack功能更强大.比如优化,混淆打包后的代码
mode: 模式. development(开发环境)和production(运行环境). 决定了不同的打包程度","entry: 入口. 项目的打包入口文件
output: 出口. 项目打包后的文件名和存放位置
loader: 加载器. 让webpack处理非js文件
plugins: 插件. 让webpack功能更强大.比如优化,混淆打包后的代码
mode: 模式. development(开发环境)和production(运行环境). 决定了不同的打包程度"
webpack打包初体验,"1. 创建项目根目录, 使用yarn init -y生成package.json说明文档

2. 开发环境安装两个模块
yarn add webpack@5.12.0 webpack-cli@4.5.0 -D

3. 项目根目录中新建webpack.config.js打包配置文件, 并做如下配置:
module.exports = {
    // 配置webpack的5大概念
    // 1. 入口
    entry: 'index.js',
    // 2. 出口
    output: {},
    // 3. 加载器
    module: {},
    // 4. 插件
    plugins: [],
    // 5. 模式
    mode: 'development'
}

4. 在项目根目录中创建src业务目录, 新建index.html和index.js文件

5. 修改package.json文件,如下:
 ""scripts"": {
    ""build"": ""webpack""
  },

6. 运行yarn build|npm run build打包项目即可","1. 创建项目根目录, 使用yarn init -y生成package.json说明文档

2. 开发环境安装两个模块
yarn add webpack@5.12.0 webpack-cli@4.5.0 -D

3. 项目根目录中新建webpack.config.js打包配置文件, 并做如下配置:
module.exports = {
    // 配置webpack的5大概念
    // 1. 入口
    entry: 'index.js',
    // 2. 出口
    output: {},
    // 3. 加载器
    module: {},
    // 4. 插件
    plugins: [],
    // 5. 模式
    mode: 'development'
}

4. 在项目根目录中创建src业务目录, 新建index.html和index.js文件

5. 修改package.json文件,如下:
 ""scripts"": {
    ""build"": ""webpack""
  },

6. 运行yarn build|npm run build打包项目即可"
