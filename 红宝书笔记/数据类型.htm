<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <Script>
// 因为 ECMAScript 的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。 typeof
// 操作符就是为此而生的。对一个值使用 typeof 操作符会返回下列字符串之一：
//  "undefined"表示值未定义；
//  "boolean"表示值为布尔值；
//  "string"表示值为字符串；
//  "number"表示值为数值；
//  "object"表示值为对象（而不是函数）或 null；
//  "function"表示值为函数；
//  "symbol"表示值为符号。
// 下面是使用 typeof 操作符的例子：
// let message = "some string";
// console.log(typeof message); // "string"
// console.log(typeof(message)); // "string"
// console.log(typeof 95); // "number"
// let message = undefined;
// console.log(message == undefined); // true
let message; // 这个变量被声明了，只是值为 undefined
// console.log(!message); // "undefined" true
function a(b) {
    if(b=true){
        return true;
    }
    else{
        return false;
    }
}
console.log(a(!message))
// 在定义将来要保存对象值的变量时，建议使用 null 来初始化，不要使用其他值。这样，只要检查
// 这个变量的值是不是 null 就可以知道这个变量是否在后来被重新赋予了一个对象的引用，比如：
if (car != null) {
// car 是一个对象的引用
}
// 虽然布尔值只有两个，但所有其他 ECMAScript 类型的值都有相应布尔值的等价形式。要将一个其
// 他类型的值转换为布尔值，可以调用特定的 Boolean()转型函数：
let message = "Hello world!";
let messageAsBoolean = Boolean(message);
// 在这个例子中，字符串 message 会被转换为布尔值并保存在变量 messageAsBoolean 中。
// Boolean()转型函数可以在任意类型的数据上调用，而且始终返回一个布尔值。什么值能转换为 true
// 或 false 的规则取决于数据类型和实际的值。下表总结了不同类型与布尔值之间的转换规则。
// 数据类型 转换为 true的值   转换为 false的值
// Boolean  true               false
// String  非空字符串         ""（空字符串）
// Number 非零数值（包括无穷值） 0、 NaN（参见后面的相关内容）
// Object 任意对象               null
// Undefined  N/A （不存在）     undefined
// 理解以上转换非常重要，因为像 if 等流控制语句会自动执行其他类型值到布尔值的转换，例如：
let message = "Hello world!";
if (message) {
console.log("Value is true");
}
// 在这个例子中， console.log 会输出字符串"Value is true"，因为字符串 message 会被自动
// 转换为等价的布尔值 true。由于存在这种自动转换，理解流控制语句中使用的是什么变量就非常重要。
// 错误地使用对象而不是布尔值会明显改变应用程序的执行流。



    </Script>
</body>
</html>